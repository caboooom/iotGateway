Index: src/main/java/com/nhnacademy/aiot/node/SensorTypeFilterNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport org.json.simple.JSONObject;\nimport com.nhnacademy.aiot.Msg;\nimport com.nhnacademy.aiot.Wire;\nimport com.nhnacademy.aiot.util.Config;\nimport lombok.extern.log4j.Log4j2;\n\n@Log4j2\npublic class SensorTypeFilterNode extends Node {\n    String[] sensorTypes;\n\n    public SensorTypeFilterNode(int inputPortCount, int outputPortCount) {\n        super(inputPortCount, outputPortCount);\n    }\n\n    @Override\n    public void preprocess() {\n        sensorTypes = Config.properties.getProperty(\"sensorTypes\").split(\",\");\n    }\n\n    @Override\n    public void process() {\n        for (Wire wire : inputPorts[0].getWires()) {\n            if (wire.hasMessage()) {\n                Msg msg = wire.get();\n                processMessage(msg);\n            }\n        }\n    }\n\n    private void processMessage(Msg msg) {\n        JSONObject payload = (JSONObject) msg.getPayload().get(\"object\");\n\n        if (payload == null) {\n            return;\n        }\n\n        String deviceId = (String) ((JSONObject) msg.getPayload().get(\"deviceInfo\")).get(\"devEui\");\n        String place =(String) ((JSONObject)((JSONObject) msg.getPayload().get(\"deviceInfo\")).get(\"tags\")).get(\"place\");\n\n        for (String sensor : sensorTypes) {\n            if (payload.get(sensor) != null) {\n                Msg outMsg = createMessage(deviceId, sensor, (Double) payload.get(sensor), place);\n                out(outMsg);\n            }\n        }\n    }\n\n    private Msg createMessage(String deviceId, String sensor, Double sensorValue, String place) {\n        Msg outMsg = new Msg();\n        outMsg.setTopic(\"/d/\" + deviceId + \"/p/\" + place + \"/e/\" + sensor);\n\n\n        JSONObject outPayload = new JSONObject();\n        outPayload.put(\"time\", System.currentTimeMillis());\n        outPayload.put(sensor, sensorValue);\n        outMsg.setPayload(outPayload);\n\n        return outMsg;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/SensorTypeFilterNode.java b/src/main/java/com/nhnacademy/aiot/node/SensorTypeFilterNode.java
--- a/src/main/java/com/nhnacademy/aiot/node/SensorTypeFilterNode.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/SensorTypeFilterNode.java	(date 1701349318609)
@@ -4,23 +4,31 @@
 import com.nhnacademy.aiot.Msg;
 import com.nhnacademy.aiot.Wire;
 import com.nhnacademy.aiot.util.Config;
-import lombok.extern.log4j.Log4j2;
 
-@Log4j2
 public class SensorTypeFilterNode extends Node {
+
     String[] sensorTypes;
 
     public SensorTypeFilterNode(int inputPortCount, int outputPortCount) {
         super(inputPortCount, outputPortCount);
+
     }
 
     @Override
     public void preprocess() {
-        sensorTypes = Config.properties.getProperty("sensorTypes").split(",");
+        if (Config.getProperty("sensorTypes") != null) {
+            sensorTypes = Config.getProperty("sensorTypes").split(",");
+        } else {
+            sensorTypes = new String[]{"defaultSensorType"};
+        }
     }
 
     @Override
     public void process() {
+        if (sensorTypes == null){
+            return;
+        }
+
         for (Wire wire : inputPorts[0].getWires()) {
             if (wire.hasMessage()) {
                 Msg msg = wire.get();
@@ -41,12 +49,14 @@
 
         for (String sensor : sensorTypes) {
             if (payload.get(sensor) != null) {
+
                 Msg outMsg = createMessage(deviceId, sensor, (Double) payload.get(sensor), place);
                 out(outMsg);
             }
         }
     }
 
+
     private Msg createMessage(String deviceId, String sensor, Double sensorValue, String place) {
         Msg outMsg = new Msg();
         outMsg.setTopic("/d/" + deviceId + "/p/" + place + "/e/" + sensor);
@@ -56,7 +66,6 @@
         outPayload.put("time", System.currentTimeMillis());
         outPayload.put(sensor, sensorValue);
         outMsg.setPayload(outPayload);
-
         return outMsg;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/com/nhnacademy/aiot/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot;\n\nimport com.nhnacademy.aiot.node.*;\nimport com.nhnacademy.aiot.util.Config;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Config command = new Config(args);\n        command.set();\n\n        MqttInNode mqttInNode = new MqttInNode(2);\n        MqttOutNode mqttOutNode = new MqttOutNode(1);\n        SensorTypeFilterNode filterNode = new SensorTypeFilterNode(1, 1);\n        FilterNode fn = new FilterNode(1, 1, args);\n        Node debugNode = new DebugNode();\n\n        Wire wire = new Wire();\n        Wire wire1 = new Wire();\n        Wire wire2 = new Wire();\n\n        mqttInNode.setOutputWire(0, wire);\n//        filterNode.setInputWire(0, wire);\n        fn.setInputWire(0, wire);\n\n//        filterNode.setOutputWire(0, wire1);\n//        filterNode.setOutputWire(0, wire2);\n        fn.setOutputWire(0, wire1);\n        fn.setOutputWire(0, wire2);\n\n\n\n        debugNode.setInputWire(0,  wire1);\n\n        mqttOutNode.setInputWire(0, wire2);\n\n        mqttInNode.start();\n        mqttOutNode.start();\n        debugNode.start();\n//        filterNode.start();\n        fn.start();\n       \n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/Main.java b/src/main/java/com/nhnacademy/aiot/Main.java
--- a/src/main/java/com/nhnacademy/aiot/Main.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/Main.java	(date 1701348656473)
@@ -1,6 +1,14 @@
 package com.nhnacademy.aiot;
 
-import com.nhnacademy.aiot.node.*;
+import java.lang.reflect.InvocationTargetException;
+import org.apache.logging.log4j.core.util.ReflectionUtil;
+import org.eclipse.paho.client.mqttv3.MqttClient;
+import com.nhnacademy.aiot.enums.Nodes;
+import com.nhnacademy.aiot.node.DebugNode;
+import com.nhnacademy.aiot.node.MqttInNode;
+import com.nhnacademy.aiot.node.MqttOutNode;
+import com.nhnacademy.aiot.node.Node;
+import com.nhnacademy.aiot.node.SensorTypeFilterNode;
 import com.nhnacademy.aiot.util.Config;
 
 
@@ -9,11 +17,9 @@
     public static void main(String[] args) {
         Config command = new Config(args);
         command.set();
-
-        MqttInNode mqttInNode = new MqttInNode(2);
+        MqttInNode mqttInNode = new MqttInNode(1, "tcp://ems.nhnacademy.com", "clientID");
         MqttOutNode mqttOutNode = new MqttOutNode(1);
         SensorTypeFilterNode filterNode = new SensorTypeFilterNode(1, 1);
-        FilterNode fn = new FilterNode(1, 1, args);
         Node debugNode = new DebugNode();
 
         Wire wire = new Wire();
@@ -21,15 +27,10 @@
         Wire wire2 = new Wire();
 
         mqttInNode.setOutputWire(0, wire);
-//        filterNode.setInputWire(0, wire);
-        fn.setInputWire(0, wire);
-
-//        filterNode.setOutputWire(0, wire1);
-//        filterNode.setOutputWire(0, wire2);
-        fn.setOutputWire(0, wire1);
-        fn.setOutputWire(0, wire2);
+        filterNode.setInputWire(0, wire);
 
-
+        filterNode.setOutputWire(0, wire1);
+        filterNode.setOutputWire(0, wire2);
 
         debugNode.setInputWire(0,  wire1);
 
@@ -38,9 +39,7 @@
         mqttInNode.start();
         mqttOutNode.start();
         debugNode.start();
-//        filterNode.start();
-        fn.start();
-       
+        filterNode.start();
     }
 
 }
Index: log/2023-11-30.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/log/2023-11-30.log b/log/2023-11-30.log
new file mode 100644
--- /dev/null	(date 1701349321080)
+++ b/log/2023-11-30.log	(date 1701349321080)
@@ -0,0 +1,315 @@
+[INFO] 2023-11-30T09:25:28  [Node] MqttInNode - start
+[INFO] 2023-11-30T09:25:28  [Node] MqttOutNode - start
+[INFO] 2023-11-30T09:25:28  [Node] DebugNode - start
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.8,"time":1701303933264}}
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701303933264}}
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/co2", payload :{"co2":562.0,"time":1701303933264}}
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.8,"time":1701303933364}}
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701303933364}}
+[DEBUG] 2023-11-30T09:25:33  [DebugNode] {topic : "24e124126d152590/d/co2", payload :{"co2":562.0,"time":1701303933364}}
+[DEBUG] 2023-11-30T09:25:34  [DebugNode] {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.3,"time":1701303934266}}
+[DEBUG] 2023-11-30T09:25:34  [DebugNode] {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701303934266}}
+[DEBUG] 2023-11-30T09:25:34  [DebugNode] {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.3,"time":1701303934366}}
+[DEBUG] 2023-11-30T09:25:34  [DebugNode] {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701303934366}}
+[DEBUG] 2023-11-30T09:25:35  [DebugNode] {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.400000000000002,"time":1701303935067}}
+[DEBUG] 2023-11-30T09:25:35  [DebugNode] {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701303935067}}
+[DEBUG] 2023-11-30T09:25:38  [DebugNode] {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.0,"time":1701303938274}}
+[DEBUG] 2023-11-30T09:25:38  [DebugNode] {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.5,"time":1701303938274}}
+[DEBUG] 2023-11-30T09:25:39  [DebugNode] {topic : "24e124126d152969/d/temperature", payload :{"temperature":19.0,"time":1701303939276}}
+[DEBUG] 2023-11-30T09:25:39  [DebugNode] {topic : "24e124126d152969/d/humidity", payload :{"humidity":36.0,"time":1701303939276}}
+[DEBUG] 2023-11-30T09:25:46  [DebugNode] {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.6,"time":1701303946794}}
+[DEBUG] 2023-11-30T09:25:46  [DebugNode] {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.0,"time":1701303946794}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701303950202}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.5,"time":1701303950202}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/co2", payload :{"co2":1257.0,"time":1701303950202}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701303950302}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.5,"time":1701303950302}}
+[DEBUG] 2023-11-30T09:25:50  [DebugNode] {topic : "24e124128c067999/d/co2", payload :{"co2":1257.0,"time":1701303950302}}
+[DEBUG] 2023-11-30T09:26:14  [DebugNode] {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.6,"time":1701303974463}}
+[DEBUG] 2023-11-30T09:26:14  [DebugNode] {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701303974463}}
+[DEBUG] 2023-11-30T09:26:19  [DebugNode] {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.1,"time":1701303979173}}
+[DEBUG] 2023-11-30T09:26:19  [DebugNode] {topic : "24e124128c140101/d/humidity", payload :{"humidity":24.5,"time":1701303979173}}
+[DEBUG] 2023-11-30T09:26:19  [DebugNode] {topic : "24e124128c140101/d/co2", payload :{"co2":642.0,"time":1701303979173}}
+[DEBUG] 2023-11-30T09:26:27  [DebugNode] {topic : "24e124126d152919/d/temperature", payload :{"temperature":20.900000000000002,"time":1701303987694}}
+[DEBUG] 2023-11-30T09:26:27  [DebugNode] {topic : "24e124126d152919/d/humidity", payload :{"humidity":24.5,"time":1701303987694}}
+[DEBUG] 2023-11-30T09:26:34  [DebugNode] {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.5,"time":1701303994305}}
+[DEBUG] 2023-11-30T09:26:34  [DebugNode] {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701303994305}}
+[DEBUG] 2023-11-30T09:26:35  [DebugNode] {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.400000000000002,"time":1701303995107}}
+[DEBUG] 2023-11-30T09:26:35  [DebugNode] {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701303995107}}
+[DEBUG] 2023-11-30T09:26:38  [DebugNode] {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.0,"time":1701303998214}}
+[DEBUG] 2023-11-30T09:26:38  [DebugNode] {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701303998214}}
+[DEBUG] 2023-11-30T09:26:46  [DebugNode] {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.8,"time":1701304006834}}
+[DEBUG] 2023-11-30T09:26:46  [DebugNode] {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.0,"time":1701304006834}}
+[DEBUG] 2023-11-30T09:26:50  [DebugNode] {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.8,"time":1701304010440}}
+[DEBUG] 2023-11-30T09:26:50  [DebugNode] {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.5,"time":1701304010440}}
+[DEBUG] 2023-11-30T09:26:50  [DebugNode] {topic : "24e124128c067999/d/co2", payload :{"co2":1222.0,"time":1701304010440}}
+[DEBUG] 2023-11-30T09:27:14  [DebugNode] {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304034690}}
+[DEBUG] 2023-11-30T09:27:14  [DebugNode] {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701304034690}}
+[DEBUG] 2023-11-30T09:27:19  [DebugNode] {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.200000000000003,"time":1701304039101}}
+[DEBUG] 2023-11-30T09:27:19  [DebugNode] {topic : "24e124128c140101/d/humidity", payload :{"humidity":24.0,"time":1701304039101}}
+[DEBUG] 2023-11-30T09:27:19  [DebugNode] {topic : "24e124128c140101/d/co2", payload :{"co2":642.0,"time":1701304039101}}
+[DEBUG] 2023-11-30T09:27:34  [DebugNode] {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.5,"time":1701304054231}}
+[DEBUG] 2023-11-30T09:27:34  [DebugNode] {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701304054231}}
+[DEBUG] 2023-11-30T09:27:35  [DebugNode] {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.8,"time":1701304055133}}
+[DEBUG] 2023-11-30T09:27:35  [DebugNode] {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701304055133}}
+[DEBUG] 2023-11-30T09:27:35  [DebugNode] {topic : "24e124126d152590/d/co2", payload :{"co2":543.0,"time":1701304055133}}
+[DEBUG] 2023-11-30T09:27:35  [DebugNode] {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.400000000000002,"time":1701304055234}}
+[DEBUG] 2023-11-30T09:27:35  [DebugNode] {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701304055234}}
+[DEBUG] 2023-11-30T09:27:38  [DebugNode] {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.0,"time":1701304058241}}
+[DEBUG] 2023-11-30T09:27:38  [DebugNode] {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304058241}}
+[DEBUG] 2023-11-30T09:27:40  [DebugNode] {topic : "24e124126d152969/d/temperature", payload :{"temperature":19.0,"time":1701304060946}}
+[DEBUG] 2023-11-30T09:27:41  [DebugNode] {topic : "24e124126d152969/d/humidity", payload :{"humidity":36.0,"time":1701304060946}}
+[DEBUG] 2023-11-30T09:27:43  [DebugNode] {topic : "24e124126c457594/d/temperature", payload :{"temperature":4.3,"time":1701304063051}}
+[DEBUG] 2023-11-30T09:27:46  [DebugNode] {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.8,"time":1701304066856}}
+[DEBUG] 2023-11-30T09:27:46  [DebugNode] {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.0,"time":1701304066856}}
+[DEBUG] 2023-11-30T09:27:50  [DebugNode] {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304070161}}
+[DEBUG] 2023-11-30T09:27:50  [DebugNode] {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304070161}}
+[DEBUG] 2023-11-30T09:27:50  [DebugNode] {topic : "24e124128c067999/d/co2", payload :{"co2":1222.0,"time":1701304070161}}
+[DEBUG] 2023-11-30T09:27:57  [DebugNode] {topic : "24e124136d150970/d/temperature", payload :{"temperature":17.0,"time":1701304077375}}
+[DEBUG] 2023-11-30T09:27:57  [DebugNode] {topic : "24e124136d150970/d/humidity", payload :{"humidity":27.5,"time":1701304077375}}
+[DEBUG] 2023-11-30T09:28:14  [DebugNode] {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304094613}}
+[DEBUG] 2023-11-30T09:28:14  [DebugNode] {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.5,"time":1701304094613}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.3,"time":1701304099124}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/humidity", payload :{"humidity":24.0,"time":1701304099124}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/co2", payload :{"co2":647.0,"time":1701304099124}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.3,"time":1701304099224}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/humidity", payload :{"humidity":24.0,"time":1701304099224}}
+[DEBUG] 2023-11-30T09:28:19  [DebugNode] {topic : "24e124128c140101/d/co2", payload :{"co2":647.0,"time":1701304099224}}
+[INFO] 2023-11-30T09:28:28  MqttInNode - start
+[INFO] 2023-11-30T09:28:28  DebugNode - start
+[INFO] 2023-11-30T09:28:28  MqttOutNode - start
+[DEBUG] 2023-11-30T09:28:29  {topic : "24e124126d152919/d/temperature", payload :{"temperature":20.8,"time":1701304109503}}
+[DEBUG] 2023-11-30T09:28:29  {topic : "24e124126d152919/d/humidity", payload :{"humidity":24.5,"time":1701304109503}}
+[DEBUG] 2023-11-30T09:28:34  {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.6,"time":1701304114212}}
+[DEBUG] 2023-11-30T09:28:34  {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701304114212}}
+[DEBUG] 2023-11-30T09:28:35  {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.400000000000002,"time":1701304115113}}
+[DEBUG] 2023-11-30T09:28:35  {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701304115113}}
+[DEBUG] 2023-11-30T09:28:38  {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.0,"time":1701304118419}}
+[DEBUG] 2023-11-30T09:28:38  {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304118419}}
+[DEBUG] 2023-11-30T09:28:38  {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.0,"time":1701304118519}}
+[DEBUG] 2023-11-30T09:28:38  {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304118519}}
+[DEBUG] 2023-11-30T09:28:46  {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304126934}}
+[DEBUG] 2023-11-30T09:28:47  {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.0,"time":1701304126934}}
+[DEBUG] 2023-11-30T09:28:50  {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304130439}}
+[DEBUG] 2023-11-30T09:28:50  {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304130439}}
+[DEBUG] 2023-11-30T09:28:50  {topic : "24e124128c067999/d/co2", payload :{"co2":1193.0,"time":1701304130439}}
+[INFO] 2023-11-30T09:30:36  DebugNode - start
+[INFO] 2023-11-30T09:30:36  MqttOutNode - start
+[INFO] 2023-11-30T09:30:36  MqttInNode - start
+[DEBUG] 2023-11-30T09:30:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.1,"time":1701304238304}}
+[DEBUG] 2023-11-30T09:30:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304238304}}
+[INFO] 2023-11-30T09:31:06  MqttInNode - start
+[INFO] 2023-11-30T09:31:06  MqttOutNode - start
+[INFO] 2023-11-30T09:31:06  DebugNode - start
+[DEBUG] 2023-11-30T09:31:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304274481}}
+[DEBUG] 2023-11-30T09:31:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.5,"time":1701304274481}}
+[DEBUG] 2023-11-30T09:31:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.400000000000002,"time":1701304278993}}
+[DEBUG] 2023-11-30T09:31:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":24.0,"time":1701304278993}}
+[DEBUG] 2023-11-30T09:31:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":637.0,"time":1701304278993}}
+[DEBUG] 2023-11-30T09:31:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.700000000000003,"time":1701304294230}}
+[DEBUG] 2023-11-30T09:31:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701304294230}}
+[DEBUG] 2023-11-30T09:31:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304295132}}
+[DEBUG] 2023-11-30T09:31:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.5,"time":1701304295132}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.200000000000003,"time":1701304298239}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304298239}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.200000000000003,"time":1701304298339}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304298340}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.900000000000002,"time":1701304298740}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701304298740}}
+[DEBUG] 2023-11-30T09:31:38  DebugNode {topic : "24e124126d152590/d/co2", payload :{"co2":563.0,"time":1701304298740}}
+[DEBUG] 2023-11-30T09:31:44  DebugNode {topic : "24e124126d152969/d/temperature", payload :{"temperature":19.1,"time":1701304304453}}
+[DEBUG] 2023-11-30T09:31:44  DebugNode {topic : "24e124126d152969/d/humidity", payload :{"humidity":36.0,"time":1701304304453}}
+[DEBUG] 2023-11-30T09:31:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304306758}}
+[DEBUG] 2023-11-30T09:31:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":20.5,"time":1701304306758}}
+[DEBUG] 2023-11-30T09:31:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304306858}}
+[DEBUG] 2023-11-30T09:31:47  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":20.5,"time":1701304306858}}
+[DEBUG] 2023-11-30T09:31:50  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":21.0,"time":1701304310066}}
+[DEBUG] 2023-11-30T09:31:50  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304310066}}
+[DEBUG] 2023-11-30T09:31:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1238.0,"time":1701304310066}}
+[DEBUG] 2023-11-30T09:32:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304334526}}
+[DEBUG] 2023-11-30T09:32:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.5,"time":1701304334526}}
+[DEBUG] 2023-11-30T09:32:19  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.400000000000002,"time":1701304339037}}
+[DEBUG] 2023-11-30T09:32:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.5,"time":1701304339037}}
+[DEBUG] 2023-11-30T09:32:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":640.0,"time":1701304339037}}
+[DEBUG] 2023-11-30T09:32:22  DebugNode {topic : "24e124136d151485/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304342544}}
+[DEBUG] 2023-11-30T09:32:22  DebugNode {topic : "24e124136d151485/d/humidity", payload :{"humidity":23.0,"time":1701304342544}}
+[DEBUG] 2023-11-30T09:32:26  DebugNode {topic : "24e124136d151561/d/temperature", payload :{"temperature":15.200000000000001,"time":1701304346753}}
+[DEBUG] 2023-11-30T09:32:26  DebugNode {topic : "24e124136d151561/d/humidity", payload :{"humidity":32.0,"time":1701304346753}}
+[DEBUG] 2023-11-30T09:32:33  DebugNode {topic : "24e124126d152919/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304353066}}
+[DEBUG] 2023-11-30T09:32:33  DebugNode {topic : "24e124126d152919/d/humidity", payload :{"humidity":24.5,"time":1701304353066}}
+[DEBUG] 2023-11-30T09:32:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.700000000000003,"time":1701304354168}}
+[DEBUG] 2023-11-30T09:32:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":18.0,"time":1701304354168}}
+[DEBUG] 2023-11-30T09:32:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304355070}}
+[DEBUG] 2023-11-30T09:32:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.5,"time":1701304355070}}
+[DEBUG] 2023-11-30T09:32:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.200000000000003,"time":1701304358278}}
+[DEBUG] 2023-11-30T09:32:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304358278}}
+[DEBUG] 2023-11-30T09:32:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.8,"time":1701304366799}}
+[DEBUG] 2023-11-30T09:32:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":20.5,"time":1701304366799}}
+[DEBUG] 2023-11-30T09:32:50  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304370307}}
+[DEBUG] 2023-11-30T09:32:50  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":26.5,"time":1701304370307}}
+[DEBUG] 2023-11-30T09:32:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1227.0,"time":1701304370307}}
+[DEBUG] 2023-11-30T09:33:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304394458}}
+[DEBUG] 2023-11-30T09:33:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.5,"time":1701304394458}}
+[DEBUG] 2023-11-30T09:33:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304394558}}
+[DEBUG] 2023-11-30T09:33:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.5,"time":1701304394558}}
+[DEBUG] 2023-11-30T09:33:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.5,"time":1701304398968}}
+[DEBUG] 2023-11-30T09:33:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.5,"time":1701304398968}}
+[DEBUG] 2023-11-30T09:33:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":640.0,"time":1701304398968}}
+[DEBUG] 2023-11-30T09:33:19  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.5,"time":1701304399068}}
+[DEBUG] 2023-11-30T09:33:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.5,"time":1701304399068}}
+[DEBUG] 2023-11-30T09:33:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":640.0,"time":1701304399068}}
+[DEBUG] 2023-11-30T09:33:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.8,"time":1701304414200}}
+[DEBUG] 2023-11-30T09:33:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304414200}}
+[DEBUG] 2023-11-30T09:33:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.8,"time":1701304414300}}
+[DEBUG] 2023-11-30T09:33:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304414300}}
+[DEBUG] 2023-11-30T09:33:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304415101}}
+[DEBUG] 2023-11-30T09:33:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701304415101}}
+[DEBUG] 2023-11-30T09:33:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.200000000000003,"time":1701304418307}}
+[DEBUG] 2023-11-30T09:33:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304418307}}
+[DEBUG] 2023-11-30T09:33:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.200000000000003,"time":1701304418408}}
+[DEBUG] 2023-11-30T09:33:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304418408}}
+[DEBUG] 2023-11-30T09:33:40  DebugNode {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.900000000000002,"time":1701304420612}}
+[DEBUG] 2023-11-30T09:33:40  DebugNode {topic : "24e124126d152590/d/humidity", payload :{"humidity":31.5,"time":1701304420612}}
+[DEBUG] 2023-11-30T09:33:40  DebugNode {topic : "24e124126d152590/d/co2", payload :{"co2":549.0,"time":1701304420612}}
+[DEBUG] 2023-11-30T09:33:46  DebugNode {topic : "24e124126d152969/d/temperature", payload :{"temperature":19.0,"time":1701304426424}}
+[DEBUG] 2023-11-30T09:33:46  DebugNode {topic : "24e124126d152969/d/humidity", payload :{"humidity":36.0,"time":1701304426424}}
+[DEBUG] 2023-11-30T09:33:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304426825}}
+[DEBUG] 2023-11-30T09:33:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.5,"time":1701304426825}}
+[DEBUG] 2023-11-30T09:33:50  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304430032}}
+[DEBUG] 2023-11-30T09:33:50  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304430032}}
+[DEBUG] 2023-11-30T09:33:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1227.0,"time":1701304430032}}
+[DEBUG] 2023-11-30T09:34:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.700000000000003,"time":1701304454489}}
+[DEBUG] 2023-11-30T09:34:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701304454489}}
+[DEBUG] 2023-11-30T09:34:19  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.6,"time":1701304458999}}
+[DEBUG] 2023-11-30T09:34:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.5,"time":1701304458999}}
+[DEBUG] 2023-11-30T09:34:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":625.0,"time":1701304458999}}
+[DEBUG] 2023-11-30T09:34:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.900000000000002,"time":1701304474238}}
+[DEBUG] 2023-11-30T09:34:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304474238}}
+[DEBUG] 2023-11-30T09:34:34  DebugNode {topic : "24e124126d152919/d/temperature", payload :{"temperature":21.0,"time":1701304474939}}
+[DEBUG] 2023-11-30T09:34:35  DebugNode {topic : "24e124126d152919/d/humidity", payload :{"humidity":24.5,"time":1701304474939}}
+[DEBUG] 2023-11-30T09:34:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304475139}}
+[DEBUG] 2023-11-30T09:34:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701304475139}}
+[DEBUG] 2023-11-30T09:34:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304475239}}
+[DEBUG] 2023-11-30T09:34:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.0,"time":1701304475239}}
+[DEBUG] 2023-11-30T09:34:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.3,"time":1701304478245}}
+[DEBUG] 2023-11-30T09:34:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304478245}}
+[DEBUG] 2023-11-30T09:34:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304486765}}
+[DEBUG] 2023-11-30T09:34:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":21.0,"time":1701304486765}}
+[DEBUG] 2023-11-30T09:34:50  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304490273}}
+[DEBUG] 2023-11-30T09:34:50  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304490273}}
+[DEBUG] 2023-11-30T09:34:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1282.0,"time":1701304490273}}
+[DEBUG] 2023-11-30T09:35:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.8,"time":1701304514533}}
+[DEBUG] 2023-11-30T09:35:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701304514533}}
+[DEBUG] 2023-11-30T09:35:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.6,"time":1701304518942}}
+[DEBUG] 2023-11-30T09:35:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.5,"time":1701304518942}}
+[DEBUG] 2023-11-30T09:35:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":625.0,"time":1701304518942}}
+[DEBUG] 2023-11-30T09:35:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.8,"time":1701304534179}}
+[DEBUG] 2023-11-30T09:35:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304534179}}
+[DEBUG] 2023-11-30T09:35:34  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.8,"time":1701304534279}}
+[DEBUG] 2023-11-30T09:35:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304534279}}
+[DEBUG] 2023-11-30T09:35:35  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304535080}}
+[DEBUG] 2023-11-30T09:35:35  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.5,"time":1701304535080}}
+[DEBUG] 2023-11-30T09:35:38  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.3,"time":1701304538286}}
+[DEBUG] 2023-11-30T09:35:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304538286}}
+[DEBUG] 2023-11-30T09:35:42  DebugNode {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.900000000000002,"time":1701304542496}}
+[DEBUG] 2023-11-30T09:35:42  DebugNode {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701304542496}}
+[DEBUG] 2023-11-30T09:35:42  DebugNode {topic : "24e124126d152590/d/co2", payload :{"co2":573.0,"time":1701304542496}}
+[DEBUG] 2023-11-30T09:35:42  DebugNode {topic : "24e124126d152590/d/temperature", payload :{"temperature":16.900000000000002,"time":1701304542596}}
+[DEBUG] 2023-11-30T09:35:42  DebugNode {topic : "24e124126d152590/d/humidity", payload :{"humidity":32.0,"time":1701304542596}}
+[DEBUG] 2023-11-30T09:35:43  DebugNode {topic : "24e124126d152590/d/co2", payload :{"co2":573.0,"time":1701304542596}}
+[DEBUG] 2023-11-30T09:35:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.7,"time":1701304546807}}
+[DEBUG] 2023-11-30T09:35:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":20.5,"time":1701304546807}}
+[DEBUG] 2023-11-30T09:35:48  DebugNode {topic : "24e124126d152969/d/temperature", payload :{"temperature":19.200000000000003,"time":1701304548011}}
+[DEBUG] 2023-11-30T09:35:48  DebugNode {topic : "24e124126d152969/d/humidity", payload :{"humidity":36.5,"time":1701304548011}}
+[DEBUG] 2023-11-30T09:35:49  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304549915}}
+[DEBUG] 2023-11-30T09:35:50  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304549915}}
+[DEBUG] 2023-11-30T09:35:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1282.0,"time":1701304549915}}
+[DEBUG] 2023-11-30T09:36:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.8,"time":1701304574155}}
+[DEBUG] 2023-11-30T09:36:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701304574155}}
+[DEBUG] 2023-11-30T09:36:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.8,"time":1701304578663}}
+[DEBUG] 2023-11-30T09:36:18  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.0,"time":1701304578663}}
+[DEBUG] 2023-11-30T09:36:18  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":632.0,"time":1701304578663}}
+[DEBUG] 2023-11-30T09:36:33  DebugNode {topic : "24e124136d151368/d/temperature", payload :{"temperature":23.900000000000002,"time":1701304593882}}
+[DEBUG] 2023-11-30T09:36:34  DebugNode {topic : "24e124136d151368/d/humidity", payload :{"humidity":17.5,"time":1701304593882}}
+[DEBUG] 2023-11-30T09:36:34  DebugNode {topic : "24e124785c421885/d/temperature", payload :{"temperature":20.5,"time":1701304594784}}
+[DEBUG] 2023-11-30T09:36:34  DebugNode {topic : "24e124785c421885/d/humidity", payload :{"humidity":30.5,"time":1701304594784}}
+[DEBUG] 2023-11-30T09:36:36  DebugNode {topic : "24e124126d152919/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304596387}}
+[DEBUG] 2023-11-30T09:36:36  DebugNode {topic : "24e124126d152919/d/humidity", payload :{"humidity":24.5,"time":1701304596387}}
+[DEBUG] 2023-11-30T09:36:37  DebugNode {topic : "24e124785c389010/d/temperature", payload :{"temperature":20.3,"time":1701304597890}}
+[DEBUG] 2023-11-30T09:36:38  DebugNode {topic : "24e124785c389010/d/humidity", payload :{"humidity":24.0,"time":1701304597890}}
+[DEBUG] 2023-11-30T09:36:46  DebugNode {topic : "24e124136d151547/d/temperature", payload :{"temperature":18.6,"time":1701304606508}}
+[DEBUG] 2023-11-30T09:36:46  DebugNode {topic : "24e124136d151547/d/humidity", payload :{"humidity":20.5,"time":1701304606508}}
+[DEBUG] 2023-11-30T09:36:49  DebugNode {topic : "24e124128c067999/d/temperature", payload :{"temperature":20.900000000000002,"time":1701304609816}}
+[DEBUG] 2023-11-30T09:36:49  DebugNode {topic : "24e124128c067999/d/humidity", payload :{"humidity":27.0,"time":1701304609816}}
+[DEBUG] 2023-11-30T09:36:50  DebugNode {topic : "24e124128c067999/d/co2", payload :{"co2":1274.0,"time":1701304609816}}
+[DEBUG] 2023-11-30T09:37:14  DebugNode {topic : "24e124785c389818/d/temperature", payload :{"temperature":19.8,"time":1701304634181}}
+[DEBUG] 2023-11-30T09:37:14  DebugNode {topic : "24e124785c389818/d/humidity", payload :{"humidity":33.0,"time":1701304634181}}
+[DEBUG] 2023-11-30T09:37:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.8,"time":1701304638588}}
+[DEBUG] 2023-11-30T09:37:18  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.0,"time":1701304638588}}
+[DEBUG] 2023-11-30T09:37:18  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":632.0,"time":1701304638588}}
+[DEBUG] 2023-11-30T09:37:18  DebugNode {topic : "24e124128c140101/d/temperature", payload :{"temperature":19.8,"time":1701304638688}}
+[DEBUG] 2023-11-30T09:37:19  DebugNode {topic : "24e124128c140101/d/humidity", payload :{"humidity":23.0,"time":1701304638688}}
+[DEBUG] 2023-11-30T09:37:19  DebugNode {topic : "24e124128c140101/d/co2", payload :{"co2":632.0,"time":1701304638688}}
+[INFO] 2023-11-30T21:52:11  create node : MqttInNode_0
+[INFO] 2023-11-30T21:52:11  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:52:11  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:52:11  create node : DebugNode_3
+[INFO] 2023-11-30T21:52:11  start node : DebugNode_3
+[INFO] 2023-11-30T21:52:11  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:52:11  create node : ClientNode_4
+[INFO] 2023-11-30T21:53:09  create node : MqttInNode_0
+[INFO] 2023-11-30T21:53:09  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:53:09  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:53:09  create node : DebugNode_3
+[INFO] 2023-11-30T21:53:09  start node : DebugNode_3
+[INFO] 2023-11-30T21:53:09  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:53:09  create node : ClientNode_4
+[INFO] 2023-11-30T21:53:35  create node : MqttInNode_0
+[INFO] 2023-11-30T21:53:36  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:53:36  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:53:36  create node : DebugNode_3
+[INFO] 2023-11-30T21:53:36  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:53:36  create node : ClientNode_4
+[INFO] 2023-11-30T21:53:36  start node : DebugNode_3
+[INFO] 2023-11-30T21:55:23  create node : MqttInNode_0
+[INFO] 2023-11-30T21:55:23  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:55:23  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:55:23  create node : DebugNode_3
+[INFO] 2023-11-30T21:55:23  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:55:23  start node : DebugNode_3
+[INFO] 2023-11-30T21:55:23  create node : ClientNode_4
+[INFO] 2023-11-30T21:56:40  create node : MqttInNode_0
+[INFO] 2023-11-30T21:56:40  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:56:40  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:56:40  create node : DebugNode_3
+[INFO] 2023-11-30T21:56:40  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:56:40  create node : ClientNode_4
+[INFO] 2023-11-30T21:56:40  start node : DebugNode_3
+[INFO] 2023-11-30T21:58:25  create node : MqttInNode_0
+[INFO] 2023-11-30T21:58:25  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:58:25  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:58:25  create node : DebugNode_3
+[INFO] 2023-11-30T21:58:25  start node : DebugNode_3
+[INFO] 2023-11-30T21:58:25  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:58:25  create node : ClientNode_4
+[INFO] 2023-11-30T21:59:11  create node : MqttInNode_0
+[INFO] 2023-11-30T21:59:11  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:59:11  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:59:11  create node : DebugNode_3
+[INFO] 2023-11-30T21:59:11  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:59:11  start node : DebugNode_3
+[INFO] 2023-11-30T21:59:11  create node : ClientNode_4
+[INFO] 2023-11-30T21:59:26  create node : MqttInNode_0
+[INFO] 2023-11-30T21:59:26  create node : MqttOutNode_1
+[INFO] 2023-11-30T21:59:26  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T21:59:26  create node : DebugNode_3
+[INFO] 2023-11-30T21:59:26  start node : MqttOutNode_1
+[INFO] 2023-11-30T21:59:26  start node : DebugNode_3
+[INFO] 2023-11-30T21:59:26  create node : ClientNode_4
+[INFO] 2023-11-30T22:02:01  create node : MqttInNode_0
+[INFO] 2023-11-30T22:02:01  create node : MqttOutNode_1
+[INFO] 2023-11-30T22:02:01  create node : SensorTypeFilterNode_2
+[INFO] 2023-11-30T22:02:01  create node : DebugNode_3
+[INFO] 2023-11-30T22:02:01  start node : MqttOutNode_1
+[INFO] 2023-11-30T22:02:01  start node : DebugNode_3
+[INFO] 2023-11-30T22:02:01  create node : ClientNode_4
Index: src/main/java/com/nhnacademy/aiot/node/Node.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport com.nhnacademy.aiot.Msg;\nimport com.nhnacademy.aiot.Port;\nimport com.nhnacademy.aiot.Wire;\nimport lombok.extern.log4j.Log4j2;\n\n@Log4j2\npublic class Node implements Runnable {\n    private Thread thread;\n    protected Port[] inputPorts;\n    protected Port[] outputPorts;\n\n    protected int inCount = 0;\n    protected int outCount = 0;\n    protected int errCount = 0;\n\n    protected Node(int inputPortCount, int outputPortCount) {\n        this.inputPorts = new Port[inputPortCount];\n        this.outputPorts = new Port[outputPortCount];\n\n        for (int i = 0; i < inputPortCount; i++) {\n            inputPorts[i] = new Port();\n        }\n\n        for (int i = 0; i < outputPortCount; i++) {\n            outputPorts[i] = new Port();\n        }\n    }\n\n    public void preprocess() {\n        log.info(this.getClass().getSimpleName() + \" - start\");\n    }\n\n    public void process() {\n\n    }\n\n    public void postprocess() {\n        log.info(this.getClass().getSimpleName() + \" - stop\");\n    }\n\n    public void out(Msg outMessage) {\n        \n        outputPorts[0].out(outMessage);\n            \n    }\n\n    public void out(Msg... outMessages) {\n        \n        for (int i = 0; i < outMessages.length; i++) {\n            outputPorts[i].out(outMessages[i]);\n        }\n    }\n\n    public void setInputWire(int portIdx, Wire inputWire) {\n        if (portIdx < inputPorts.length) {\n            inputPorts[portIdx].addWire(inputWire);\n        }\n    }\n\n    public void setOutputWire(int portIdx, Wire outputWire) {\n        if (portIdx < outputPorts.length) {\n            outputPorts[portIdx].addWire(outputWire);\n        }\n    }\n\n    public synchronized void start() {\n        thread = new Thread(this, this.getClass().getSimpleName());\n        thread.start();\n    }\n\n    @Override\n    public void run() {\n        preprocess();\n\n        while ((thread != null) && thread.isAlive()) {\n            process();\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                if (thread != null) {\n                    thread.interrupt();\n                }\n            }\n        }\n\n        postprocess();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/Node.java b/src/main/java/com/nhnacademy/aiot/node/Node.java
--- a/src/main/java/com/nhnacademy/aiot/node/Node.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/Node.java	(date 1701348813914)
@@ -7,9 +7,13 @@
 
 @Log4j2
 public class Node implements Runnable {
+
     private Thread thread;
     protected Port[] inputPorts;
     protected Port[] outputPorts;
+    private static int nodeCount;
+    protected String name;
+
 
     protected int inCount = 0;
     protected int outCount = 0;
@@ -18,7 +22,8 @@
     protected Node(int inputPortCount, int outputPortCount) {
         this.inputPorts = new Port[inputPortCount];
         this.outputPorts = new Port[outputPortCount];
-
+        name = getClass().getSimpleName()+ "_" + nodeCount++;
+        log.info("create node : " + name);
         for (int i = 0; i < inputPortCount; i++) {
             inputPorts[i] = new Port();
         }
@@ -29,11 +34,11 @@
     }
 
     public void preprocess() {
-        log.info(this.getClass().getSimpleName() + " - start");
+        log.info("start node : " + name);
     }
 
     public void process() {
-
+        //이 메서드는 상속받는 하위 클래스에서 구현한다.
     }
 
     public void postprocess() {
@@ -41,13 +46,13 @@
     }
 
     public void out(Msg outMessage) {
-        
+
         outputPorts[0].out(outMessage);
-            
+
     }
 
     public void out(Msg... outMessages) {
-        
+
         for (int i = 0; i < outMessages.length; i++) {
             outputPorts[i].out(outMessages[i]);
         }
Index: src/main/java/com/nhnacademy/aiot/test/Own.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.test;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.eclipse.paho.client.mqttv3.*;\nimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;\nimport org.json.simple.JSONObject;\n\nimport java.nio.charset.StandardCharsets;\n\npublic class Own {\n    static String broker = \"tcp://ems.nhnacademy.com:1883\";\n    static String clientId = \"JavaMqttClient\";\n    static String topics = \"#\";\n\n    public static void main(String[] args) throws MqttException {\n\n        try {\n            IMqttClient publisher = new MqttClient(broker, clientId, new MemoryPersistence());\n            MqttConnectOptions options = new MqttConnectOptions();\n            ObjectMapper objm = new ObjectMapper();\n\n            connectToBroker(options, publisher);\n            mqttMethod(publisher);\n            publisher.subscribe(topics, (topic, msg) -> {\n//                System.out.println(topic);\n                String[] topicList  = topic.split(\"/\");\n\n                // TODO Json Parsing\n                // TODO split 없이 사용할 수 있는 mqtt Method 찾기\n\n                if (\"application\".equals(topicList[0])){\n                    String jsonString = msg.toString();\n                    JsonNode jsonNode = objm.readTree(jsonString);\n\n//                    System.out.println(\"JsonNode: \" + jsonNode);\n\n                    if (jsonNode.path(\"deviceInfo\").path(\"tags\").has(\"place\")){\n                        String place = jsonNode.path(\"deviceInfo\").path(\"tags\").path(\"place\").asText();\n                        System.out.println(\"place : \" + place);\n                    } else {\n                        System.out.println(\"null\");\n                    }\n                    // Todo 필요한 값 추출\n                    String time = jsonNode.path(\"time\").asText();\n                    String humidity = jsonNode.path(\"object\").path(\"humidity\").asText();\n                    String temperature = jsonNode.path(\"object\").path(\"temperature\").asText();\n                    String co2 = jsonNode.path(\"object\").path(\"co2\").asText();\n                    String leq = jsonNode.path(\"object\").path(\"leq\").asText();\n                    String lmax = jsonNode.path(\"object\").path(\"lmax\").asText();\n                    String tvoc = jsonNode.path(\"object\").path(\"tvoc\").asText();\n                    String obj = jsonNode.path(\"object\").asText();\n\n//                    System.out.println(\"시간: \" + time);\n//                    System.out.println(\"습도: \" + humidity);\n//                    System.out.println(\"온도: \" + temperature);\n//                    System.out.println(\"co2: \" + co2);\n//                    System.out.println(\"leq: \" + leq);\n//                    System.out.println(\"lmax: \" +lmax);\n//                    System.out.println(\"tvoc: \" + tvoc);\n//                    System.out.println(\"obj: \" + obj);\n                }\n\n            });\n\n            while (!Thread.interrupted()) {\n                Thread.sleep(1000);\n            }\n\n            publisher.disconnect();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void mqttMethod(IMqttClient publisher) {\n\n        publisher.setCallback(new MqttCallback() {\n\n            //MQTT Broker 연결이 끊길때\n            @Override\n            public void connectionLost(Throwable throwable) {\n                System.out.println(\"Disconnected\");\n            }\n\n            // 구독한 토픽에 새로운 메시지가 도착했을 때 호출.\n            @Override\n            public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {\n                String payloadString = new String(mqttMessage.getPayload(), StandardCharsets.UTF_8);\n            }\n\n            // 메시지 전송이 끝났을 때, qos 1 or 2에서만 사용됨\n            @Override\n            public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {\n                System.out.println(\"전송완료\");\n            }\n        });\n    }\n\n    private static void connectToBroker(MqttConnectOptions options, IMqttClient publisher) throws MqttException {\n        options.setAutomaticReconnect(true);\n        options.setCleanSession(true);\n        options.setConnectionTimeout(10);\n        options.setWill(\"willTopic\", \"연결끊김\".getBytes(), 1, false);\n        System.out.println(\"Connecting to Broker:\" + broker);\n        publisher.connect(options);\n        System.out.println(\"연결 완료\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/test/Own.java b/src/main/java/com/nhnacademy/aiot/test/Own.java
--- a/src/main/java/com/nhnacademy/aiot/test/Own.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/test/Own.java	(date 1701349067195)
@@ -1,109 +1,109 @@
-package com.nhnacademy.aiot.test;
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import org.eclipse.paho.client.mqttv3.*;
-import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
-import org.json.simple.JSONObject;
-
-import java.nio.charset.StandardCharsets;
-
-public class Own {
-    static String broker = "tcp://ems.nhnacademy.com:1883";
-    static String clientId = "JavaMqttClient";
-    static String topics = "#";
-
-    public static void main(String[] args) throws MqttException {
-
-        try {
-            IMqttClient publisher = new MqttClient(broker, clientId, new MemoryPersistence());
-            MqttConnectOptions options = new MqttConnectOptions();
-            ObjectMapper objm = new ObjectMapper();
-
-            connectToBroker(options, publisher);
-            mqttMethod(publisher);
-            publisher.subscribe(topics, (topic, msg) -> {
-//                System.out.println(topic);
-                String[] topicList  = topic.split("/");
-
-                // TODO Json Parsing
-                // TODO split 없이 사용할 수 있는 mqtt Method 찾기
-
-                if ("application".equals(topicList[0])){
-                    String jsonString = msg.toString();
-                    JsonNode jsonNode = objm.readTree(jsonString);
-
-//                    System.out.println("JsonNode: " + jsonNode);
-
-                    if (jsonNode.path("deviceInfo").path("tags").has("place")){
-                        String place = jsonNode.path("deviceInfo").path("tags").path("place").asText();
-                        System.out.println("place : " + place);
-                    } else {
-                        System.out.println("null");
-                    }
-                    // Todo 필요한 값 추출
-                    String time = jsonNode.path("time").asText();
-                    String humidity = jsonNode.path("object").path("humidity").asText();
-                    String temperature = jsonNode.path("object").path("temperature").asText();
-                    String co2 = jsonNode.path("object").path("co2").asText();
-                    String leq = jsonNode.path("object").path("leq").asText();
-                    String lmax = jsonNode.path("object").path("lmax").asText();
-                    String tvoc = jsonNode.path("object").path("tvoc").asText();
-                    String obj = jsonNode.path("object").asText();
-
-//                    System.out.println("시간: " + time);
-//                    System.out.println("습도: " + humidity);
-//                    System.out.println("온도: " + temperature);
-//                    System.out.println("co2: " + co2);
-//                    System.out.println("leq: " + leq);
-//                    System.out.println("lmax: " +lmax);
-//                    System.out.println("tvoc: " + tvoc);
-//                    System.out.println("obj: " + obj);
-                }
-
-            });
-
-            while (!Thread.interrupted()) {
-                Thread.sleep(1000);
-            }
-
-            publisher.disconnect();
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private static void mqttMethod(IMqttClient publisher) {
-
-        publisher.setCallback(new MqttCallback() {
-
-            //MQTT Broker 연결이 끊길때
-            @Override
-            public void connectionLost(Throwable throwable) {
-                System.out.println("Disconnected");
-            }
-
-            // 구독한 토픽에 새로운 메시지가 도착했을 때 호출.
-            @Override
-            public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {
-                String payloadString = new String(mqttMessage.getPayload(), StandardCharsets.UTF_8);
-            }
-
-            // 메시지 전송이 끝났을 때, qos 1 or 2에서만 사용됨
-            @Override
-            public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {
-                System.out.println("전송완료");
-            }
-        });
-    }
-
-    private static void connectToBroker(MqttConnectOptions options, IMqttClient publisher) throws MqttException {
-        options.setAutomaticReconnect(true);
-        options.setCleanSession(true);
-        options.setConnectionTimeout(10);
-        options.setWill("willTopic", "연결끊김".getBytes(), 1, false);
-        System.out.println("Connecting to Broker:" + broker);
-        publisher.connect(options);
-        System.out.println("연결 완료");
-    }
-}
+//package com.nhnacademy.aiot.test;
+//import com.fasterxml.jackson.databind.JsonNode;
+//import com.fasterxml.jackson.databind.ObjectMapper;
+//import org.eclipse.paho.client.mqttv3.*;
+//import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
+//import org.json.simple.JSONObject;
+//
+//import java.nio.charset.StandardCharsets;
+//
+//public class Own {
+//    static String broker = "tcp://ems.nhnacademy.com:1883";
+//    static String clientId = "JavaMqttClient";
+//    static String topics = "#";
+//
+//    public static void main(String[] args) throws MqttException {
+//
+//        try {
+//            IMqttClient publisher = new MqttClient(broker, clientId, new MemoryPersistence());
+//            MqttConnectOptions options = new MqttConnectOptions();
+//            ObjectMapper objm = new ObjectMapper();
+//
+//            connectToBroker(options, publisher);
+//            mqttMethod(publisher);
+//            publisher.subscribe(topics, (topic, msg) -> {
+////                System.out.println(topic);
+//                String[] topicList  = topic.split("/");
+//
+//                // TODO Json Parsing
+//                // TODO split 없이 사용할 수 있는 mqtt Method 찾기
+//
+//                if ("application".equals(topicList[0])){
+//                    String jsonString = msg.toString();
+//                    JsonNode jsonNode = objm.readTree(jsonString);
+//
+////                    System.out.println("JsonNode: " + jsonNode);
+//
+//                    if (jsonNode.path("deviceInfo").path("tags").has("place")){
+//                        String place = jsonNode.path("deviceInfo").path("tags").path("place").asText();
+//                        System.out.println("place : " + place);
+//                    } else {
+//                        System.out.println("null");
+//                    }
+//                    // Todo 필요한 값 추출
+//                    String time = jsonNode.path("time").asText();
+//                    String humidity = jsonNode.path("object").path("humidity").asText();
+//                    String temperature = jsonNode.path("object").path("temperature").asText();
+//                    String co2 = jsonNode.path("object").path("co2").asText();
+//                    String leq = jsonNode.path("object").path("leq").asText();
+//                    String lmax = jsonNode.path("object").path("lmax").asText();
+//                    String tvoc = jsonNode.path("object").path("tvoc").asText();
+//                    String obj = jsonNode.path("object").asText();
+//
+////                    System.out.println("시간: " + time);
+////                    System.out.println("습도: " + humidity);
+////                    System.out.println("온도: " + temperature);
+////                    System.out.println("co2: " + co2);
+////                    System.out.println("leq: " + leq);
+////                    System.out.println("lmax: " +lmax);
+////                    System.out.println("tvoc: " + tvoc);
+////                    System.out.println("obj: " + obj);
+//                }
+//
+//            });
+//
+//            while (!Thread.interrupted()) {
+//                Thread.sleep(1000);
+//            }
+//
+//            publisher.disconnect();
+//
+//        } catch (Exception e) {
+//            e.printStackTrace();
+//        }
+//    }
+//
+//    private static void mqttMethod(IMqttClient publisher) {
+//
+//        publisher.setCallback(new MqttCallback() {
+//
+//            //MQTT Broker 연결이 끊길때
+//            @Override
+//            public void connectionLost(Throwable throwable) {
+//                System.out.println("Disconnected");
+//            }
+//
+//            // 구독한 토픽에 새로운 메시지가 도착했을 때 호출.
+//            @Override
+//            public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {
+//                String payloadString = new String(mqttMessage.getPayload(), StandardCharsets.UTF_8);
+//            }
+//
+//            // 메시지 전송이 끝났을 때, qos 1 or 2에서만 사용됨
+//            @Override
+//            public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {
+//                System.out.println("전송완료");
+//            }
+//        });
+//    }
+//
+//    private static void connectToBroker(MqttConnectOptions options, IMqttClient publisher) throws MqttException {
+//        options.setAutomaticReconnect(true);
+//        options.setCleanSession(true);
+//        options.setConnectionTimeout(10);
+//        options.setWill("willTopic", "연결끊김".getBytes(), 1, false);
+//        System.out.println("Connecting to Broker:" + broker);
+//        publisher.connect(options);
+//        System.out.println("연결 완료");
+//    }
+//}
Index: src/main/java/com/nhnacademy/aiot/node/MqttOutNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport java.util.UUID;\nimport org.eclipse.paho.client.mqttv3.IMqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\nimport com.nhnacademy.aiot.Msg;\nimport com.nhnacademy.aiot.Port;\nimport com.nhnacademy.aiot.Wire;\n\npublic class MqttOutNode extends Node {\n\n    public MqttOutNode(int inputWireCount) {\n        super(inputWireCount, 0);\n    }\n\n    @Override\n    public void process() {\n        for (Port port : inputPorts) {\n            for (Wire wire : port.getWires()) {\n               pubMQTT(wire);\n            }\n        }\n    }\n\n    private void pubMQTT(Wire wire) {\n        if (wire.hasMessage()) {\n            Msg msg = wire.get();\n            String publisherId = UUID.randomUUID().toString();\n\n            try (IMqttClient client = new MqttClient(\"tcp://localhost:1883\", publisherId)) {\n                MqttConnectOptions options = new MqttConnectOptions();\n                options.setAutomaticReconnect(true);\n                options.setCleanSession(true);\n                options.setConnectionTimeout(10);\n                options.setWill(\"test/will\", \"Disconnected\".getBytes(), 1, false);\n\n                client.connect();\n                MqttMessage mqttMessage = new MqttMessage(msg.getPayload().toString().getBytes());\n                client.publish(msg.getTopic(), mqttMessage);\n                client.disconnect();\n\n            } catch (MqttException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/MqttOutNode.java b/src/main/java/com/nhnacademy/aiot/node/MqttOutNode.java
--- a/src/main/java/com/nhnacademy/aiot/node/MqttOutNode.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/MqttOutNode.java	(date 1701349093536)
@@ -12,6 +12,7 @@
 
 public class MqttOutNode extends Node {
 
+
     public MqttOutNode(int inputWireCount) {
         super(inputWireCount, 0);
     }
@@ -20,7 +21,7 @@
     public void process() {
         for (Port port : inputPorts) {
             for (Wire wire : port.getWires()) {
-               pubMQTT(wire);
+                pubMQTT(wire);
             }
         }
     }
@@ -47,6 +48,7 @@
             }
         }
     }
+
+
 }
 
-
Index: src/main/java/com/nhnacademy/aiot/enums/Nodes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/enums/Nodes.java b/src/main/java/com/nhnacademy/aiot/enums/Nodes.java
new file mode 100644
--- /dev/null	(date 1701348410306)
+++ b/src/main/java/com/nhnacademy/aiot/enums/Nodes.java	(date 1701348410306)
@@ -0,0 +1,36 @@
+package com.nhnacademy.aiot.enums;
+
+import com.nhnacademy.aiot.node.Node;
+
+public enum Nodes {
+    
+    FUNCTION_NODE("functionNode", Node.class),
+    MQTT_IN_NODE("mqttInNode", Node.class),
+    MQTT_OUT_NODE("mqttOutNode", Node.class),
+    CLIENT_NODE("clientNode", Node.class);
+
+    private final String nodeType;
+    private final Class<?> clazz;
+
+    Nodes(String nodeType, Class<?> clazz) {
+        this.nodeType = nodeType;
+        this.clazz = clazz;
+    }
+
+    public String getNodeType() {
+        return nodeType;
+    }
+
+    public static Class<?> getNodeClass(String nodeType) {
+        for (Nodes node : Nodes.values()) {
+            if (node.getNodeType().equals(nodeType)) {
+                return node.getClazz();
+            }
+        }
+        return null;
+    }
+
+    public Class<?> getClazz() {
+        return clazz;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/nhnacademy/aiot/enums/CmdOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/enums/CmdOptions.java b/src/main/java/com/nhnacademy/aiot/enums/CmdOptions.java
new file mode 100644
--- /dev/null	(date 1701348410306)
+++ b/src/main/java/com/nhnacademy/aiot/enums/CmdOptions.java	(date 1701348410306)
@@ -0,0 +1,30 @@
+package com.nhnacademy.aiot.enums;
+
+public enum CmdOptions {
+    
+    CONFIG_FILE( "configFile", "c" ,"Argument는 ','로 구분된 문자열로 주어짐"),
+    SENSOR_TYPES("sensorTypes", "s" , "JSON 형식의 설정파일을 argument로 받는다."),
+    APPLICATION_NAME("applicationName", "an", null);
+
+    String key;
+    String value;
+    String description;
+
+    CmdOptions(String key, String value, String description){
+        this.key = key;
+        this.value = value;
+        this.description = description;
+
+    }
+
+    public String getValue() {
+        return value;
+    }
+    public String getKey() {
+        return key;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+}
Index: src/main/java/com/nhnacademy/aiot/node/FilterNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.nhnacademy.aiot.Msg;\nimport com.nhnacademy.aiot.Wire;\nimport lombok.extern.log4j.Log4j2;\nimport org.json.simple.JSONObject;\n\n// Filter 는 SensorTypeFilterNode 처럼 개별로 만들지 말고,\n// FilterNode를 만들고 여기에 설정을 통해서 SensorType, Branch 등을 필터링 할 수 있도록 만들어 보세요\n// TODO Branch\n\n@Log4j2\npublic class FilterNode extends Node{\n    String[] sensorTypes;\n    ObjectMapper objectMapper = new ObjectMapper();\n    static JsonNode payload;\n\n    public FilterNode(int inputPortCount, int outputPortCount, String[] sensorTypes) {\n        super(inputPortCount, outputPortCount);\n        this.sensorTypes = sensorTypes;\n    }\n\n    @Override\n    public void process() {\n        for (Wire wire : inputPorts[0].getWires()){\n            if (wire.hasMessage()){\n                Msg msg = wire.get();\n                try {\n                    processMsg(msg.toString(), sensorTypes);\n                } catch (JsonProcessingException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n    }\n\n    private void processMsg(String msgString, String[] sensorTypes) throws JsonProcessingException {\n        payload = objectMapper.readTree(msgString);\n\n        for (String sensorType : sensorTypes) {\n            Double value = payload.path(\"object\").path(sensorType).asDouble();\n            String deviceId = getData(\"object\", \"deviceInfo\", \"devEui\");\n            String place = getData(\"deviceInfo\", \"tags\", \"place\");\n\n            Msg outMsg = createMessage(deviceId, place, sensorType, value);\n            out(outMsg);\n        }\n    }\n\n    private String getData(String... paths) {\n        JsonNode result = payload;\n        for (String path : paths) {\n            result = result.path(path);\n        }\n\n        return result.asText();\n    }\n\n\n    private Msg createMessage(String deviceId, String place, String sensor, Double sensorValue){\n        Msg outMsg = new Msg();\n        outMsg.setTopic(\"/d/\" + deviceId + \"/p/\" + place + \"/e/\" + sensor);\n\n        JSONObject outPayload = new JSONObject();\n        outPayload.put(\"time\", System.currentTimeMillis());\n        outPayload.put(sensor, sensorValue);\n        outMsg.setPayload(outPayload);\n\n        return outMsg;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/FilterNode.java b/src/main/java/com/nhnacademy/aiot/node/FilterNode.java
--- a/src/main/java/com/nhnacademy/aiot/node/FilterNode.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/FilterNode.java	(date 1701348921942)
@@ -1,75 +1,75 @@
-package com.nhnacademy.aiot.node;
-
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nhnacademy.aiot.Msg;
-import com.nhnacademy.aiot.Wire;
-import lombok.extern.log4j.Log4j2;
-import org.json.simple.JSONObject;
-
-// Filter 는 SensorTypeFilterNode 처럼 개별로 만들지 말고,
-// FilterNode를 만들고 여기에 설정을 통해서 SensorType, Branch 등을 필터링 할 수 있도록 만들어 보세요
-// TODO Branch
-
-@Log4j2
-public class FilterNode extends Node{
-    String[] sensorTypes;
-    ObjectMapper objectMapper = new ObjectMapper();
-    static JsonNode payload;
-
-    public FilterNode(int inputPortCount, int outputPortCount, String[] sensorTypes) {
-        super(inputPortCount, outputPortCount);
-        this.sensorTypes = sensorTypes;
-    }
-
-    @Override
-    public void process() {
-        for (Wire wire : inputPorts[0].getWires()){
-            if (wire.hasMessage()){
-                Msg msg = wire.get();
-                try {
-                    processMsg(msg.toString(), sensorTypes);
-                } catch (JsonProcessingException e) {
-                    throw new RuntimeException(e);
-                }
-            }
-        }
-    }
-
-    private void processMsg(String msgString, String[] sensorTypes) throws JsonProcessingException {
-        payload = objectMapper.readTree(msgString);
-
-        for (String sensorType : sensorTypes) {
-            Double value = payload.path("object").path(sensorType).asDouble();
-            String deviceId = getData("object", "deviceInfo", "devEui");
-            String place = getData("deviceInfo", "tags", "place");
-
-            Msg outMsg = createMessage(deviceId, place, sensorType, value);
-            out(outMsg);
-        }
-    }
-
-    private String getData(String... paths) {
-        JsonNode result = payload;
-        for (String path : paths) {
-            result = result.path(path);
-        }
-
-        return result.asText();
-    }
-
-
-    private Msg createMessage(String deviceId, String place, String sensor, Double sensorValue){
-        Msg outMsg = new Msg();
-        outMsg.setTopic("/d/" + deviceId + "/p/" + place + "/e/" + sensor);
-
-        JSONObject outPayload = new JSONObject();
-        outPayload.put("time", System.currentTimeMillis());
-        outPayload.put(sensor, sensorValue);
-        outMsg.setPayload(outPayload);
-
-        return outMsg;
-    }
-
-}
+//package com.nhnacademy.aiot.node;
+//
+//import com.fasterxml.jackson.core.JsonProcessingException;
+//import com.fasterxml.jackson.databind.JsonNode;
+//import com.fasterxml.jackson.databind.ObjectMapper;
+//import com.nhnacademy.aiot.Msg;
+//import com.nhnacademy.aiot.Wire;
+//import lombok.extern.log4j.Log4j2;
+//import org.json.simple.JSONObject;
+//
+//// Filter 는 SensorTypeFilterNode 처럼 개별로 만들지 말고,
+//// FilterNode를 만들고 여기에 설정을 통해서 SensorType, Branch 등을 필터링 할 수 있도록 만들어 보세요
+//// TODO Branch
+//
+//@Log4j2
+//public class FilterNode extends Node{
+//    String[] sensorTypes;
+//    ObjectMapper objectMapper = new ObjectMapper();
+//    static JsonNode payload;
+//
+//    public FilterNode(int inputPortCount, int outputPortCount, String[] sensorTypes) {
+//        super(inputPortCount, outputPortCount);
+//        this.sensorTypes = sensorTypes;
+//    }
+//
+//    @Override
+//    public void process() {
+//        for (Wire wire : inputPorts[0].getWires()){
+//            if (wire.hasMessage()){
+//                Msg msg = wire.get();
+//                try {
+//                    processMsg(msg.toString(), sensorTypes);
+//                } catch (JsonProcessingException e) {
+//                    throw new RuntimeException(e);
+//                }
+//            }
+//        }
+//    }
+//
+//    private void processMsg(String msgString, String[] sensorTypes) throws JsonProcessingException {
+//        payload = objectMapper.readTree(msgString);
+//
+//        for (String sensorType : sensorTypes) {
+//            Double value = payload.path("object").path(sensorType).asDouble();
+//            String deviceId = getData("object", "deviceInfo", "devEui");
+//            String place = getData("deviceInfo", "tags", "place");
+//
+//            Msg outMsg = createMessage(deviceId, place, sensorType, value);
+//            out(outMsg);
+//        }
+//    }
+//
+//    private String getData(String... paths) {
+//        JsonNode result = payload;
+//        for (String path : paths) {
+//            result = result.path(path);
+//        }
+//
+//        return result.asText();
+//    }
+//
+//
+//    private Msg createMessage(String deviceId, String place, String sensor, Double sensorValue){
+//        Msg outMsg = new Msg();
+//        outMsg.setTopic("/d/" + deviceId + "/p/" + place + "/e/" + sensor);
+//
+//        JSONObject outPayload = new JSONObject();
+//        outPayload.put("time", System.currentTimeMillis());
+//        outPayload.put(sensor, sensorValue);
+//        outMsg.setPayload(outPayload);
+//
+//        return outMsg;
+//    }
+//
+//}
Index: src/main/java/com/nhnacademy/aiot/node/ClientNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/ClientNode.java b/src/main/java/com/nhnacademy/aiot/node/ClientNode.java
new file mode 100644
--- /dev/null	(date 1701348410306)
+++ b/src/main/java/com/nhnacademy/aiot/node/ClientNode.java	(date 1701348410306)
@@ -0,0 +1,19 @@
+package com.nhnacademy.aiot.node;
+
+public class ClientNode extends Node{
+
+    protected ClientNode(int inputPortCount, int outputPortCount) {
+        super(inputPortCount, outputPortCount);
+        //TODO Auto-generated constructor stub
+    }
+
+    //이팀도 MQTT와 같은 
+
+    //클라이언트를 별도의 내부 노드로 만들고, 
+    //이와 연결된 MqttInNode, MqttOutNode를 만들었으면 합니다. Node-Red를 잘 보시면, client는 별도로 생성하고, 여기에 연결하도록 하고 있습니다.
+    //내부 노드와 MqttInNode/MqttOutNode간의 통신은 별도의 내부 wire를 구성해도 되고, MessageQueue방식등을 이용할 수도 있습니다.
+
+    // public ClientNode(){
+
+    // }
+}
Index: src/main/java/com/nhnacademy/aiot/node/MultiInputNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport com.nhnacademy.aiot.Port;\n\nimport lombok.extern.log4j.Log4j2;\n\n@Log4j2\npublic class MultiInputNode extends Node{\n    \n    public MultiInputNode(){\n        super(3 , 3);\n    }\n\n\n    @Override\n    public void process() {\n\n\n        for(Port inputPort : inputPorts ){\n           \n            if(!inputPort.hasMessage()){\n                inputPort.collectMsgFromWire();\n                continue;\n            }\n\n            log.info(inputPort.getMsg());\n\n    }\n}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/MultiInputNode.java b/src/main/java/com/nhnacademy/aiot/node/MultiInputNode.java
--- a/src/main/java/com/nhnacademy/aiot/node/MultiInputNode.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/MultiInputNode.java	(date 1701348410307)
@@ -15,7 +15,6 @@
     @Override
     public void process() {
 
-
         for(Port inputPort : inputPorts ){
            
             if(!inputPort.hasMessage()){
Index: src/main/resources/configFile.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/configFile.json b/src/main/resources/configFile.json
new file mode 100644
--- /dev/null	(date 1701348410308)
+++ b/src/main/resources/configFile.json	(date 1701348410308)
@@ -0,0 +1,4 @@
+{ "applicationName" : "9a87910d-fc6c-4f10-a6fd-a626a1ca6b4a",
+"sensors" : ["temperature", "humidity", "co2", "tvoc"] }
+
+
Index: src/main/java/com/nhnacademy/aiot/node/MqttInNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.node;\n\nimport java.util.UUID;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport org.eclipse.paho.client.mqttv3.IMqttClient;\nimport org.eclipse.paho.client.mqttv3.IMqttMessageListener;\nimport org.eclipse.paho.client.mqttv3.MqttClient;\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\nimport org.eclipse.paho.client.mqttv3.MqttException;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.ParseException;\nimport com.nhnacademy.aiot.Msg;\nimport com.nhnacademy.aiot.util.JSONUtils;\n\npublic class MqttInNode extends Node{\n\n    public MqttInNode(int outputWireCount) {\n        super(0 ,outputWireCount);\n    }\n\n    public Msg createMsg(String topic, String payload){\n            if(JSONUtils.isJson(payload)){\n                    try {\n                        JSONObject jsonObject = (JSONObject) JSONUtils.getParser().parse(payload);\n                        return new Msg(topic, jsonObject);\n\n                    } catch (ParseException e) {\n                        //error count++\n                    }\n            }\n            return null;\n    }\n\n    private MqttConnectOptions setMqttOptions() {\n        MqttConnectOptions options = new MqttConnectOptions();\n        options.setAutomaticReconnect(true);\n        options.setCleanSession(true);\n        options.setConnectionTimeout(10);\n        options.setWill(\"test/will\", \"Disconnected\".getBytes(), 1, false);\n        return options;\n    }\n\n    @Override\n    public void process() {\n        String publisherId = UUID.randomUUID().toString();\n        try (IMqttClient client = new MqttClient(\"tcp://ems.nhnacademy.com:1883\", publisherId)) {\n\n            setMqttOptions();\n\n            client.connect();\n            CountDownLatch receivedSignal = new CountDownLatch(50);\n            IMqttMessageListener listener = (topic, msg) -> {\n                String payload = new String(msg.getPayload());\n                Msg outMsg = createMsg(topic, payload);\n                if (outMsg != null) {\n                    out(outMsg);\n                }\n                receivedSignal.countDown();\n            };\n            String[] topics = {\"+/+/device/+/+/up\",\"+/+/device/+/+/up\"}; // 여러 토픽\n            client.subscribe( topics , new IMqttMessageListener[] {listener,listener} );\n            receivedSignal.await(1, TimeUnit.MINUTES);\n            client.disconnect();\n        } catch (MqttException e) {\n            e.printStackTrace();\n        } \n         catch (InterruptedException e) {\n             e.printStackTrace();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/node/MqttInNode.java b/src/main/java/com/nhnacademy/aiot/node/MqttInNode.java
--- a/src/main/java/com/nhnacademy/aiot/node/MqttInNode.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/node/MqttInNode.java	(date 1701348719741)
@@ -1,72 +1,95 @@
 package com.nhnacademy.aiot.node;
 
+import java.util.LinkedList;
+import java.util.Queue;
 import java.util.UUID;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import org.eclipse.paho.client.mqttv3.IMqttClient;
-import org.eclipse.paho.client.mqttv3.IMqttMessageListener;
 import org.eclipse.paho.client.mqttv3.MqttClient;
 import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
 import org.eclipse.paho.client.mqttv3.MqttException;
+import org.eclipse.paho.client.mqttv3.MqttMessage;
 import org.json.simple.JSONObject;
 import org.json.simple.parser.ParseException;
 import com.nhnacademy.aiot.Msg;
+import com.nhnacademy.aiot.enums.CmdOptions;
+import com.nhnacademy.aiot.util.Config;
 import com.nhnacademy.aiot.util.JSONUtils;
+import lombok.extern.log4j.Log4j2;
 
-public class MqttInNode extends Node{
+@Log4j2
+public class MqttInNode extends Node {
 
-    public MqttInNode(int outputWireCount) {
-        super(0 ,outputWireCount);
+    private String topic;
+    private String serverURI;
+    private String clientId;
+    private Queue<MqttMessage> innerMsgQueue;
+
+    public MqttInNode(int outputWireCount, String serverURI, String clientId) {
+        super(0, outputWireCount);
+        this.topic = "application/" + Config.getProperty(CmdOptions.APPLICATION_NAME.getKey())
+                + "/device/+/+/up";
+        this.serverURI = serverURI;
+        this.clientId = clientId;
+        innerMsgQueue = new LinkedList<>();
+    }
+
+    public MqttInNode(int outputWireCount, String serverURI) {
+        this(outputWireCount, serverURI, UUID.randomUUID().toString());
+    }
+
+
+    @Override
+    public void preprocess() {
+
+        ClientNode node = new ClientNode();
+        node.start();
     }
 
-    public Msg createMsg(String topic, String payload){
-            if(JSONUtils.isJson(payload)){
-                    try {
-                        JSONObject jsonObject = (JSONObject) JSONUtils.getParser().parse(payload);
-                        return new Msg(topic, jsonObject);
-
-                    } catch (ParseException e) {
-                        //error count++
-                    }
-            }
-            return null;
+    @Override
+    public void process() {
+        if (!innerMsgQueue.isEmpty()) {
+
+            MqttMessage mqttMessage = innerMsgQueue.poll();
+            String payload = new String(mqttMessage.getPayload());
+            Msg msg = createMsg(topic, payload);
+            out(msg);
+        }
+    }
+
+    private Msg createMsg(String topic, String payload) {
+        if (JSONUtils.isJson(payload)) {
+            try {
+                JSONObject jsonObject = (JSONObject) JSONUtils.getParser().parse(payload);
+                return new Msg(topic, jsonObject);
+            } catch (ParseException e) {
+                log.error("is not json");
+            }
+        }
+        return null;
     }
 
-    private MqttConnectOptions setMqttOptions() {
-        MqttConnectOptions options = new MqttConnectOptions();
-        options.setAutomaticReconnect(true);
-        options.setCleanSession(true);
-        options.setConnectionTimeout(10);
-        options.setWill("test/will", "Disconnected".getBytes(), 1, false);
-        return options;
-    }
-
-    @Override
-    public void process() {
-        String publisherId = UUID.randomUUID().toString();
-        try (IMqttClient client = new MqttClient("tcp://ems.nhnacademy.com:1883", publisherId)) {
-
-            setMqttOptions();
-
-            client.connect();
-            CountDownLatch receivedSignal = new CountDownLatch(50);
-            IMqttMessageListener listener = (topic, msg) -> {
-                String payload = new String(msg.getPayload());
-                Msg outMsg = createMsg(topic, payload);
-                if (outMsg != null) {
-                    out(outMsg);
-                }
-                receivedSignal.countDown();
-            };
-            String[] topics = {"+/+/device/+/+/up","+/+/device/+/+/up"}; // 여러 토픽
-            client.subscribe( topics , new IMqttMessageListener[] {listener,listener} );
-            receivedSignal.await(1, TimeUnit.MINUTES);
-            client.disconnect();
-        } catch (MqttException e) {
-            e.printStackTrace();
-        } 
-         catch (InterruptedException e) {
-             e.printStackTrace();
+    public class ClientNode extends Node {
+
+        protected ClientNode() {
+            super(0, 0);
+        }
+
+        @Override
+        public void run() {
+            MqttClient client;
+
+            try {
+                client = new MqttClient(serverURI, clientId);
+                MqttConnectOptions options = new MqttConnectOptions();
+                options.setAutomaticReconnect(true);
+                options.setConnectionTimeout(10);
+                client.connect();
+                client.subscribe(topic, (topic, msg) -> innerMsgQueue.add(msg));
+            } catch (MqttException e) {
+                log.error("ClientNode run()"+ e.getMessage());
+            }
         }
     }
-}
+
+
+
+}
\ No newline at end of file
Index: src/main/java/com/nhnacademy/aiot/util/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nhnacademy.aiot.util;\n\nimport java.io.FileReader;\nimport java.util.Properties;\n\n\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.json.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.DefaultParser;\n\npublic class Config {\n\n    String[] args; \n    public static Properties properties;\n    \n    public Config (String[] args){\n        this.args = args;\n        initiateProperties();\n    }\n\n    public void initiateProperties(){\n        this.properties = new Properties();\n\n        properties.setProperty(\"applicationName\", \"+\");\n\n    }\n\n    public void set(){\n\n        // Add options\n        Options options = new Options();\n\n        options.addOption(null, \"an\", true, null);\n        options.addOption(\"s\", null, true, \"Argument는 ','로 구분된 문자열로 주어짐\");\n        options.addOption(\"c\", null, true, \"JSON 형식의 설정파일을 argument로 받는다.\");\n\n\n        // Parse options and set properties\n        CommandLineParser parser = new DefaultParser();\n        try {\n            CommandLine commandLine = parser.parse(options, args);\n\n            //   설정파일 예시:\n            //   { \"applicationName\" : \"32fq8hqfq8983hqb932bvc\",\n            //     \"sensors\" : [\"temperature\", \"humidity\", \"co2\"] }\n            if (commandLine.hasOption(\"c\")){\n                String filePath = commandLine.getOptionValue(\"c\");\n\n                try{\n                    JSONParser jsonParser = new JSONParser();\n                    JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader(filePath));\n\n                    if (jsonObject.get(\"applicationName\") != null){\n                        properties.setProperty(\"applicationName\", jsonObject.get(\"applicationName\").toString());\n                    }\n                    if (jsonObject.get(\"sensors\") != null){\n                        String sensorListStr = jsonObject.getJSONArray(\"sensors\").toString(); // \" ['temperature', 'humidity', 'co2'] \"\n                        properties.setProperty(\"sensorTypes\", sensorListStr.substring(1, sensorListStr.length()-1)); // \" 'temperature', 'humidity', 'co2' \"\n\n                    }\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n            \n            // 요구사항: 설정 파일과 cmd line argument가 함께 주어질 경우 cmd line argument가 우선된다.\n            // 따라서 겹치는 내용이 있으면 cmd line argument가 기존의 내용을 덮어쓴다.\n            if(commandLine.hasOption(\"an\")){\n                properties.setProperty(\"applicationName\", commandLine.getOptionValue(\"an\"));\n            }\n\n            if (commandLine.hasOption(\"s\")){\n                properties.setProperty(\"sensorTypes\", commandLine.getOptionValue(\"s\"));\n            }\n            \n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/nhnacademy/aiot/util/Config.java b/src/main/java/com/nhnacademy/aiot/util/Config.java
--- a/src/main/java/com/nhnacademy/aiot/util/Config.java	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/src/main/java/com/nhnacademy/aiot/util/Config.java	(date 1701348410308)
@@ -1,86 +1,89 @@
 package com.nhnacademy.aiot.util;
 
 import java.io.FileReader;
+import java.io.IOException;
 import java.util.Properties;
-
-
 import org.apache.commons.cli.Options;
-import org.apache.commons.cli.ParseException;
-import org.json.JSONObject;
+import org.json.simple.JSONArray;
+import org.json.simple.JSONObject;
 import org.json.simple.parser.JSONParser;
+import org.json.simple.parser.ParseException;
+import com.nhnacademy.aiot.enums.CmdOptions;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
 import org.apache.commons.cli.DefaultParser;
 
 public class Config {
 
-    String[] args; 
-    public static Properties properties;
-    
-    public Config (String[] args){
+    String[] args;
+    private static final String SINGLE_LEVEL_WILDCARD = "+";
+    private static final Properties properties = new Properties();
+
+    public Config(String[] args) {
         this.args = args;
         initiateProperties();
     }
 
-    public void initiateProperties(){
-        this.properties = new Properties();
+    public static String getProperty(String key) {
+
+        return properties.getProperty(key);
+    }
+
+    public void initiateProperties() {
 
-        properties.setProperty("applicationName", "+");
-
+        properties.setProperty(CmdOptions.APPLICATION_NAME.getKey(), SINGLE_LEVEL_WILDCARD);
     }
 
-    public void set(){
+    public void set() {
 
-        // Add options
         Options options = new Options();
 
-        options.addOption(null, "an", true, null);
-        options.addOption("s", null, true, "Argument는 ','로 구분된 문자열로 주어짐");
-        options.addOption("c", null, true, "JSON 형식의 설정파일을 argument로 받는다.");
+        options.addOption(null, CmdOptions.APPLICATION_NAME.getValue(), true, null);
+        options.addOption(CmdOptions.SENSOR_TYPES.getValue(), null, true,
+                CmdOptions.SENSOR_TYPES.getDescription());
+        options.addOption(CmdOptions.CONFIG_FILE.getValue(), null, true,
+                CmdOptions.CONFIG_FILE.getDescription());
 
-
-        // Parse options and set properties
         CommandLineParser parser = new DefaultParser();
         try {
             CommandLine commandLine = parser.parse(options, args);
 
-            //   설정파일 예시:
-            //   { "applicationName" : "32fq8hqfq8983hqb932bvc",
-            //     "sensors" : ["temperature", "humidity", "co2"] }
-            if (commandLine.hasOption("c")){
-                String filePath = commandLine.getOptionValue("c");
+            if (commandLine.hasOption(CmdOptions.CONFIG_FILE.getValue())) {
+                String filePath = commandLine.getOptionValue(CmdOptions.CONFIG_FILE.getValue());
 
-                try{
-                    JSONParser jsonParser = new JSONParser();
-                    JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader(filePath));
+                JSONParser jsonParser = JSONUtils.getParser();
+                JSONObject jsonObject = (JSONObject) jsonParser.parse(new FileReader(filePath));
 
-                    if (jsonObject.get("applicationName") != null){
-                        properties.setProperty("applicationName", jsonObject.get("applicationName").toString());
-                    }
-                    if (jsonObject.get("sensors") != null){
-                        String sensorListStr = jsonObject.getJSONArray("sensors").toString(); // " ['temperature', 'humidity', 'co2'] "
-                        properties.setProperty("sensorTypes", sensorListStr.substring(1, sensorListStr.length()-1)); // " 'temperature', 'humidity', 'co2' "
-
-                    }
-                } catch(Exception e){
-                    e.printStackTrace();
+                if (jsonObject.get(CmdOptions.APPLICATION_NAME.getKey()) != null) {
+                    properties.setProperty(CmdOptions.APPLICATION_NAME.getKey(),
+                            jsonObject.get(CmdOptions.APPLICATION_NAME.getKey()).toString());
+                }
+                
+                if (jsonObject.get(CmdOptions.SENSOR_TYPES.getKey()) != null) {
+                    String sensorTypes =
+                            ((JSONArray) jsonObject.get(CmdOptions.SENSOR_TYPES.getKey()))
+                                    .toString();
+                    sensorTypes = sensorTypes.substring(1, sensorTypes.length() - 1);
+                    properties.setProperty(CmdOptions.SENSOR_TYPES.getKey(), sensorTypes);
                 }
-            }
-            
-            // 요구사항: 설정 파일과 cmd line argument가 함께 주어질 경우 cmd line argument가 우선된다.
-            // 따라서 겹치는 내용이 있으면 cmd line argument가 기존의 내용을 덮어쓴다.
-            if(commandLine.hasOption("an")){
-                properties.setProperty("applicationName", commandLine.getOptionValue("an"));
-            }
+
+                // 요구사항: 설정 파일과 cmd line argument가 함께 주어질 경우 cmd line argument가 우선된다.
+                // 따라서 겹치는 내용이 있으면 cmd l ine argument가 기존의 내용을 덮어쓴다.
+                if (commandLine.hasOption(CmdOptions.APPLICATION_NAME.getValue())) {
+                    properties.setProperty(CmdOptions.APPLICATION_NAME.getKey(),
+                            commandLine.getOptionValue(CmdOptions.APPLICATION_NAME.getValue()));
+                }
+
+                if (commandLine.hasOption(CmdOptions.SENSOR_TYPES.getValue())) {
+                    properties.setProperty(CmdOptions.SENSOR_TYPES.getKey(),
+                            commandLine.getOptionValue(CmdOptions.SENSOR_TYPES.getValue()));
+                }
 
-            if (commandLine.hasOption("s")){
-                properties.setProperty("sensorTypes", commandLine.getOptionValue("s"));
             }
-            
-        } catch (ParseException e) {
+        } catch (ParseException | org.apache.commons.cli.ParseException | IOException e) {
+
             e.printStackTrace();
-        }
-
+        } 
     }
+}
 
-}
Index: .vscode/launch.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"java\",\n            \"name\": \"Main\",\n            \"request\": \"launch\",\n            \"mainClass\": \"com.nhnacademy.aiot.Main\",\n            \"projectName\": \"gateway\",\n            \"args\": [\n                \"--an\",\n                \"asdasdas\",\n                \"-s\",\n                \"temperature,humidity,co2\",\n                \"-c\",\n                \"file\"\n            ]\n        },\n        {\n            \"type\": \"java\",\n            \"name\": \"Current File\",\n            \"request\": \"launch\",\n            \"mainClass\": \"${file}\"\n        },\n        {\n            \"type\": \"java\",\n            \"name\": \"Main\",\n            \"request\": \"launch\",\n            \"mainClass\": \"com.nhnacademy.aiot.Main\",\n            \"projectName\": \"iotGateway\",\n            \"args\": [\n                \"--an\",\n                \"asdasdas\",\n                \"-s\",\n                \"temperature,humidity,co2\",\n                \"-c\",\n                \"file\"\n            ]\n        }\n    ]\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.vscode/launch.json b/.vscode/launch.json
--- a/.vscode/launch.json	(revision 9ea580fc02a2b093a427a7cad4b9e6fbcacdf075)
+++ b/.vscode/launch.json	(date 1701348410305)
@@ -5,18 +5,29 @@
     "version": "0.2.0",
     "configurations": [
         {
+            "type": "java",
+            "name": "Main",
+            "request": "launch",
+            "mainClass": "com.nhnacademy.aiot.Main",
+            "projectName": "iotGateway",
+            "args": [
+                "-s",
+                "temperature,humidity,co2",
+                "-c",
+                "./src/main/resources/configFile.json"
+            ]
+        },
+        {
             "type": "java",
             "name": "Main",
             "request": "launch",
             "mainClass": "com.nhnacademy.aiot.Main",
             "projectName": "gateway",
             "args": [
-                "--an",
-                "asdasdas",
                 "-s",
                 "temperature,humidity,co2",
                 "-c",
-                "file"
+                "./src/main/resources/configFile.json"
             ]
         },
         {
@@ -24,6 +35,7 @@
             "name": "Current File",
             "request": "launch",
             "mainClass": "${file}"
+<<<<<<< HEAD
         },
         {
             "type": "java",
@@ -36,9 +48,10 @@
                 "asdasdas",
                 "-s",
                 "temperature,humidity,co2",
-                "-c",
-                "file"
+
             ]
+=======
+>>>>>>> origin/develop
         }
     ]
 }
\ No newline at end of file
